
<krpano>

	<!-- load the WebVR plugin and assign it to a 'webvr' variable for easier usage -->
	<plugin name="WebVR" devices="html5" keep="true"
	        url="webvr.js"
	        onloaded="copy(webvr, plugin[WebVR]);"
	        mousespeed="0.00125"
	        mobilevr_support="true"
	        mobilevr_ipd="63.5"
	        mobilevr_screensize="auto"
	        mobilevr_lens_fov="96"
	        mobilevr_lens_dist="0.6"
	        mobilevr_lens_vign="100"
	        mobilevr_webvr_dist="false"
	        mobilevr_sensor_mode="3"
	        mobilevr_fake_support="false"
	        vr_cursor="hotspot[vr_cursor]"
	        vr_cursor_onover="if(handcursor, tween(hotspot[vr_cursor].scale,0.4,0.1); vr_auto_click(get(vr_timeout)); );"
	        vr_cursor_onout="tween(hotspot[vr_cursor].scale,0.3,0.1);"
	        onavailable="webvr_onavailable();"
	        onunavailable=""
	        onunknowndevice="set(ask_user_for_screensize,true);"
	        onentervr="webvr_onentervr();"
	        onexitvr="webvr_onexitvr();"
	        />

	<plugin name="gyro" url="gyro.js" enabled="true"
        sensor_mode="3"/>


	<!-- the VR cursor hotspot -->
	<hotspot name="vr_cursor" keep="true"
	         url="webvr_cursor_80x80_17f.png"
	         visible="true"
	         enabled="true"
	         distorted="true"
	         crop="0|0|80|80"
	         scale="0.3"
	         depth="1000"
	         />


	<!-- vr_auto_click() - call this action in the onover event of a
	     hotspot to trigger automatically a click after some time.  -->
	<action name="vr_auto_click">
		if(webvr.isenabled,
			if(%1 != null, set(vr_aclk_timeout, %1), set(vr_aclk_timeout, 2000));
			copy(vr_aclk_t1, timertick);
			set(vr_aclk_waiting, true);
			set(hotspot[vr_cursor].crop,'0|0|80|80');

			asyncloop(vr_aclk_waiting,
				sub(dt, timertick,vr_aclk_t1);

				if(!hovering,
					set(vr_aclk_waiting, false);
					set(hotspot[vr_cursor].crop,'0|0|80|80');
				  ,
					div(f, dt, vr_aclk_timeout);
					mul(f, 16);
					roundval(f);
					Math.min(f, 16);
					mul(f, 80);

					txtadd(hotspot[vr_cursor].crop,get(f),'|0|80|80');

					<!-- wait another 100ms delay after finishing the animation before doing the click -->
					sub(dt, 100);
					if(dt GT vr_aclk_timeout,
						set(vr_aclk_waiting,false);
						set(hotspot[vr_cursor].crop,'0|0|80|80');
						<!-- call onclick -->
						onclick();
					  );
				  );
				);
		  );
	</action>


	<!-- by pressing SPACE the Oculus Rift could be re-centered -->
	<events name="webvr_events" devices="html5" keep="true"
	        onkeydown="if(keycode==32, webvr.resetSensor() );"
	        onmousedown="if(webvr.isenabled, webvr_showbuttons() );"
	        />


	<!-- when WebVR support is available show an EnterVR button -->
	<action name="webvr_onavailable">
		loadsettings();
		tween(layer[webvr_button].alpha,1);
		callwith(layer[sensor_button],update());
	</action>


	<action name="webvr_onentervr">
		set(layer[webvr_button].html,'Exit VR');
		if(ismobilevr, tween(layer[webvr_setupbutton].alpha,1));

		webvr_hide_all_non_vr_layers();

		<!-- when the screen size is unknown an no custom size is set, open the setup screen on entering the VR mode -->
		if(webvr.ismobilevr == true AND !webvr.isfake AND ask_user_for_screensize == true AND webvr.mobilevr_screensize == 'auto',
			set(ask_user_for_screensize, false);
			vr_setup();
		  );
	</action>


	<action name="webvr_onexitvr">
		stopdelayedcall(vr_button_fadeout);
		set(layer[webvr_button].html,'Enter VR');
		tween(layer[webvr_button].alpha,1);
		tween(layer[webvr_setupbutton].alpha,0);

		webvr_restore_layers();
	</action>


	<action name="webvr_hide_all_non_vr_layers">
		for(set(i,0), i LT layer.count, inc(i),
			copy(lr, layer[get(i)]);
			if(lr.vr !== true,
				copy(lr.vr_backup_visible, lr.visible);
				set(lr.visible, false);
			  );
		  );
	</action>

	<action name="webvr_restore_layers">
		for(set(i,0), i LT layer.count, inc(i),
			copy(lr, layer[get(i)]);
			if(lr.vr_backup_visible,
				copy(lr.visible, lr.vr_backup_visible);
				delete(lr.vr_backup_visible);
			  );
		  );
	</action>


	<!-- the EnterVR and SetupVR buttons -->
	<layer name="webvr_button" keep="true" vr="true"
	       url="%SWFPATH%/plugins/textfield.swf"
	       html="Enter VR"
	       backgroundcolor="0x000000"
	       roundedge="14"
	       alpha="0"
	       autoalpha="true"
	       css="color:#FFFFFF;font-size:28px;"
	       padding="12 16"
	       align="top" y="24"
	       onclick="webvr.toggleVR();"
	       />

	<layer name="webvr_setupbutton" keep="true" vr="true"
	       url="%SWFPATH%/plugins/textfield.swf"
	       html="VR Setup"
	       backgroundcolor="0x000000"
	       roundedge="14"
	       alpha="0"
	       autoalpha="true"
	       css="color:#FFFFFF;font-size:28px;"
	       padding="12 16"
	       align="bottom" y="24"
	       onclick="vr_setup()"
	       />


	<action name="webvr_showbuttons">
		stopdelayedcall(vr_button_fadeout);
		tween(layer[webvr_button].alpha|layer[webvr_setupbutton].alpha, 1.0|1.0, 0.25);
		delayedcall(vr_button_fadeout,3,
			tween(layer[webvr_button].alpha|layer[webvr_setupbutton].alpha, 0.0|0.0, 1.0);
		  );
	</action>



	<!--
		VR Setup
	-->


	<action name="vr_setup">
		<!-- create background layer -->
		addlayer(vr_setup_bg);
		set(layer[vr_setup_bg].type, container);
		set(layer[vr_setup_bg].bgcolor, 0x000000);
		set(layer[vr_setup_bg].bgalpha, 0.5);
		set(layer[vr_setup_bg].bgcapture, true);
		set(layer[vr_setup_bg].handcursor, false);
		set(layer[vr_setup_bg].align, lefttop);
		set(layer[vr_setup_bg].width, 100%);
		set(layer[vr_setup_bg].height, 100%);
		set(layer[vr_setup_bg].zorder, 99999);

		<!-- get and prepare device infos and settings -->
		copy(i_screensize, webvr.mobilevr_screensize);
		if(i_screensize == 'auto', copy(i_screensize, webvr.devicesize));
		if(i_screensize LE 0, set(i_screensize, 5.0));
		roundval(i_screensize, 1);
		txtadd(i_screensize, ' inch');

		copy(i_ipd, webvr.mobilevr_ipd);
		roundval(i_ipd, 1);
		txtadd(i_ipd, ' mm');

		copy(i_fov, webvr.mobilevr_lens_fov);
		roundval(i_fov, 0);

		copy(i_dist, webvr.mobilevr_lens_dist);
		roundval(i_dist, 2);

		copy(i_vig, webvr.mobilevr_lens_vign);
		roundval(i_vig, 0);

		set(i_headset, 'Custom');
		<!-- preselect a headset when the parameters are matching -->
		if(i_fov == 96  AND i_dist == 0.60 AND i_vig == 100, set(i_headset, 'Cardboard'));
		if(i_fov == 112 AND i_dist == 0.95 AND i_vig == 100, set(i_headset, 'GearVR'));
		if(i_fov == 179 AND i_dist == 5.00 AND i_vig == 53,  set(i_headset, 'VR ONE'));
		if(i_fov == 101 AND i_dist == 1.10 AND i_vig == 70,  set(i_headset, 'HOMiDO'));
		if(i_fov == 70  AND i_dist == 0.65 AND i_vig == 100, set(i_headset, 'ColorCross VR'));

		<!-- when the screen size is unknown, mark it red -->
		set(known_size, true);
		set(sizcol, #FFFFFF);
		copy(i_devicename, webvr.devicename);
		if(i_devicename == 'Unknown',
			if(webvr.mobilevr_screensize == 'auto',
				set(sizcol, #AA0000);
				set(known_size, false);
			  ,
				set(i_devicename, 'Custom');
			  );
		  );

		<!-- create the text elements -->
		vr_setup_createtext(vr_setup_title, 'VR SETUP',       center, center, 0, -210, #FFFFFF,     false);

		vr_setup_createtext(vr_setup_dvn1, 'Device:',         center, right,  0, -140, #FFFFFF,     true, vr_setup_select('screen') );
		vr_setup_createtext(vr_setup_dvn2, get(i_devicename), center, left,   0, -140, get(sizcol), true, vr_setup_select('screen') );
		vr_setup_createtext(vr_setup_siz1, 'Screensize:',     center, right,  0, -100, #FFFFFF,     true, vr_setup_select('screen') );
		vr_setup_createtext(vr_setup_siz2, get(i_screensize), center, left,   0, -100, get(sizcol), true, vr_setup_select('screen') );

		vr_setup_createtext(vr_setup_ipd1, 'IPD:',            center, right,  0, -40,  #FFFFFF,     true, vr_setup_select('ipd') );
		vr_setup_createtext(vr_setup_ipd2, get(i_ipd),        center, left,   0, -40,  #FFFFFF,     true, vr_setup_select('ipd') );

		vr_setup_createtext(vr_setup_hmd1, 'VR Headset:',     center, right,  0, +20,  #FFFFFF,     true, vr_setup_select('headset') );
		vr_setup_createtext(vr_setup_hmd2, get(i_headset),    center, left,   0, +20,  #FFFFFF,     true, vr_setup_select('headset') );

		vr_setup_createtext(vr_setup_fov1,  'FOV:',           center, right,  0, +60,  #FFFFFF,     true, vr_setup_select('fov') );
		vr_setup_createtext(vr_setup_fov2, get(i_fov),        center, left,   0, +60,  #FFFFFF,     true, vr_setup_select('fov') );
		vr_setup_createtext(vr_setup_dst1, 'Distortion:',     center, right,  0, +100, #FFFFFF,     true, vr_setup_select('dist') );
		vr_setup_createtext(vr_setup_dst2, get(i_dist),       center, left,   0, +100, #FFFFFF,     true, vr_setup_select('dist') );
		vr_setup_createtext(vr_setup_vig1, 'Vignette:',       center, right,  0, +140, #FFFFFF,     true, vr_setup_select('vignette') );
		vr_setup_createtext(vr_setup_vig2, get(i_vig),        center, left,   0, +140, #FFFFFF,     true, vr_setup_select('vignette') );

		vr_setup_createtext(vr_setup_sav, 'SAVE',          center, center, -200, +210, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_save() );
		vr_setup_createtext(vr_setup_rst, 'RESET',         center, center,    0, +210, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_reset() );
		vr_setup_createtext(vr_setup_cls, 'CLOSE',         center, center, +200, +210, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_close() );

		<!-- and the adjusting buttons -->
		vr_setup_createbutton(vr_setup_btn1, '&#60;', left,  left,  5%, -40, #FFFFFF, true, null);
		vr_setup_createbutton(vr_setup_btn2, '&#62;', right, right, 5%, -40, #FFFFFF, true, null);

		<!-- pre-select the screen size for adjusting when it is unknown, otherwise the IPD -->
		if(known_size == false,
			vr_setup_select('screen', true);
		  ,
			vr_setup_select('ipd', true);
		  );
	</action>


	<action name="vr_setup_createtext">
		<!--
			%1 = name
			%2 = text
			%3 = align
			%4 = edge
			%5 = x
			%6 = y
			%7 = color
			%8 = enabled
			%9 = ondown
			%10 = onup
			%11 = onclick
		-->
		addlayer(%1);
		set(layer[%1].parent, vr_setup_bg);
		set(layer[%1].url, '%SWFPATH%/plugins/textfield.swf');
		set(layer[%1].css, 'color:%7;font-size:40px;font-weight:bold;');
		set(layer[%1].padding, 0 8);
		set(layer[%1].roundedge, 8);
		set(layer[%1].background, false);
		set(layer[%1].backgroundcolor, 0xFFFFFF);
		set(layer[%1].backgroundalpha, 0.25);
		set(layer[%1].align, %3);
		set(layer[%1].edge, %4);
		set(layer[%1].x, %5);
		set(layer[%1].y, %6);
		set(layer[%1].html, %2);
		set(layer[%1].enabled, %8);
		set(layer[%1].ondown, %9);
		set(layer[%1].onup, %10);
		set(layer[%1].onclick, %11);
	</action>


	<action name="vr_setup_createbutton">
		vr_setup_createtext(%1,%2,%3,%4,%5,%6,%7,%8,%9);
		set(layer[%1].css, 'vertical-align:middle;text-align:center;color:%7;font-size:60px;font-weight:bold;');
		set(layer[%1].background, true);
		set(layer[%1].padding, 0);
		set(layer[%1].roundedge, 40);
		set(layer[%1].width, 70);
		set(layer[%1].height, 70);
		set(layer[%1].vcenter, true);
	</action>


	<action name="vr_setup_reset">
		<!-- reset to the defaults -->
		set(webvr.mobilevr_screensize, 'auto');
		copy(i_screensize, webvr.devicesize);
		if(i_screensize LE 0, set(i_screensize, 5.0));
		roundval(i_screensize, 1);
		set(layer[vr_setup_dvn2].html, get(webvr.devicename));
		txtadd(layer[vr_setup_siz2].html, get(i_screensize), ' inch');

		set(webvr.mobilevr_ipd, 63.5);
		copy(i_ipd, webvr.mobilevr_ipd);
		roundval(i_ipd, 1);
		txtadd(layer[vr_setup_ipd2].html, get(i_ipd), ' mm');

		<!-- set fake custom lens settings and call 'next' headset to switch to the default 'Cardboard' settings -->
		set(webvr.mobilevr_lens_fov, 100);
		set(webvr.mobilevr_lens_dist, 0.5);
		set(webvr.mobilevr_lens_vign, 100);
		vr_setup_change_headset(1);

		vr_setup_select(get(selected_var));
	</action>


	<action name="vr_setup_close">
		<!-- 2. parameter == true => remove children elements too -->
		removelayer(vr_setup_bg, true);
	</action>


	<action name="vr_setup_save">
		webvr.saveSettings();
		vr_setup_close();
	</action>


	<action name="vr_setup_select">
		<!-- select a setting for adjusting -->
		set(layer[vr_setup_siz2].background, false);
		set(layer[vr_setup_ipd2].background, false);
		set(layer[vr_setup_hmd2].background, false);
		set(layer[vr_setup_fov2].background, false);
		set(layer[vr_setup_dst2].background, false);
		set(layer[vr_setup_vig2].background, false);

		set(selected_setting, null);
		delete(selected_var_value);

		set(layer[vr_setup_btn1].ondown, vr_setup_change_ondown(-1) );
		set(layer[vr_setup_btn2].ondown, vr_setup_change_ondown(+1) );
		set(selected_var_callback, null);

		set(selected_var, %1);

		if(%1 == 'screen',
			set(selected_setting,      vr_setup_siz2);
			set(selected_var_name,     'webvr.mobilevr_screensize');
			set(selected_var_postfix,  ' inch');
			copy(selected_var_value,   get(selected_var_name));
			if(selected_var_value == 'auto', set(selected_var_value, 5.0));
			set(selected_var_step,     0.1);
			set(selected_var_min,      4);
			set(selected_var_max,      8);
			set(selected_var_round,    1);
			set(selected_var_callback, vr_setup_change_screen() );
		  );

		if(%1 == 'ipd',
			set(selected_setting,      vr_setup_ipd2);
			set(selected_var_name,     'webvr.mobilevr_ipd');
			set(selected_var_postfix,  ' mm');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.1);
			set(selected_var_min,      40);
			set(selected_var_max,      80);
			set(selected_var_round,    1);
		  );

		if(%1 == 'headset',
			set(selected_setting,      vr_setup_hmd2);
			set(layer[vr_setup_btn1].ondown, vr_setup_change_headset(-1) );
			set(layer[vr_setup_btn2].ondown, vr_setup_change_headset(+1) );
		  );

		if(%1 == 'fov',
			set(selected_setting,      vr_setup_fov2);
			set(selected_var_name,     'webvr.mobilevr_lens_fov');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.1);
			set(selected_var_min,      40);
			set(selected_var_max,      179);
			set(selected_var_round,    1);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );

		if(%1 == 'dist',
			set(selected_setting,      vr_setup_dst2);
			set(selected_var_name,     'webvr.mobilevr_lens_dist');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      0);
			set(selected_var_max,      5);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );

		if(%1 == 'vignette',
			set(selected_setting,      vr_setup_vig2);
			set(selected_var_name,     'webvr.mobilevr_lens_vign');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     1);
			set(selected_var_min,      10);
			set(selected_var_max,      200);
			set(selected_var_round,    0);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );

		if(selected_setting != null,
			set(layer[get(selected_setting)].background, true);
			if(%2 == true,
				set(layer[vr_setup_btn1].y, get(layer[get(selected_setting)].y));
				set(layer[vr_setup_btn2].y, get(layer[get(selected_setting)].y));
			  ,
				tween(layer[vr_setup_btn1].y, get(layer[get(selected_setting)].y));
				tween(layer[vr_setup_btn2].y, get(layer[get(selected_setting)].y));
			  );
		  );
	</action>


	<action name="vr_setup_change_screen">
		set(layer[vr_setup_dvn2].html, 'Custom');
		set(layer[vr_setup_dvn2].css, 'color:#FFFFFF;font-size:40px;font-weight:bold;');
		set(layer[vr_setup_siz2].css, 'color:#FFFFFF;font-size:40px;font-weight:bold;');
	</action>


	<action name="vr_setup_change_ondown">
		copy(t0,timertick);
		set(t1,0);
		asyncloop(pressed,
			copy(t2,timertick);
			sub(dt,t2,t1);
			if(dt GT 100,
				copy(t1,t2);
				sub(dt,t1,t0);
				div(dt,1000);
				Math.max(dt,1);
				mul(dt,%1);
				vr_setup_adjust(get(dt));
			  );
		  );
	</action>


	<action name="vr_setup_adjust">
		if(selected_setting != null,
			mul(change, selected_var_step, %1);
			add(selected_var_value, change);
			Math.max(selected_var_value, selected_var_min);
			Math.min(selected_var_value, selected_var_max);
			roundval(selected_var_value, get(selected_var_round));
			tween(get(selected_var_name), get(selected_var_value), 0.1);
			txtadd(layer[get(selected_setting)].html, get(selected_var_value), get(selected_var_postfix));
			if(selected_var_callback != null, selected_var_callback());
		  );
	</action>


	<action name="vr_setup_change_headset">
		set(i_headset, 'Custom');
		if(%1 != 0,
			copy(i_fov, webvr.mobilevr_lens_fov);
			roundval(i_fov, 0);
			copy(i_dist, webvr.mobilevr_lens_dist);
			roundval(i_dist, 2);
			copy(i_vig, webvr.mobilevr_lens_vign);
			roundval(i_vig, 0);
			if(i_fov == 96.0  AND i_dist == 0.60 AND i_vig == 100, set(i_headset, 'Cardboard'));
			if(i_fov == 112.0 AND i_dist == 0.95 AND i_vig == 100, set(i_headset, 'GearVR'));
			if(i_fov == 179.0 AND i_dist == 5.00 AND i_vig == 53,  set(i_headset, 'VR ONE'));
			if(i_fov == 101.0 AND i_dist == 1.10 AND i_vig == 70,  set(i_headset, 'HOMiDO'));
			if(i_fov == 70.0  AND i_dist == 0.65 AND i_vig == 100, set(i_headset, 'ColorCross VR'));

			if(%1 GT 0,
				<!-- loop right -->
				switch(i_headset, 'Cardboard', 'GearVR', 'VR ONE', 'HOMiDO', 'ColorCross VR');
				if(i_headset == 'Custom', set(i_headset, 'Cardboard'));
			  ,
				<!-- loop left -->
				switch(i_headset, 'ColorCross VR', 'HOMiDO', 'VR ONE', 'GearVR', 'Cardboard');
				if(i_headset == 'Custom', set(i_headset, 'ColorCross VR'));
			  );
			if(i_headset == 'Cardboard',     set(i_fov, 96);  set(i_dist, 0.60); set(i_vig, 100); );
			if(i_headset == 'GearVR',        set(i_fov, 112); set(i_dist, 0.95); set(i_vig, 100); );
			if(i_headset == 'VR ONE',        set(i_fov, 179); set(i_dist, 5.00); set(i_vig, 53);  );
			if(i_headset == 'HOMiDO',        set(i_fov, 101); set(i_dist, 1.10); set(i_vig, 70); );
			if(i_headset == 'ColorCross VR', set(i_fov, 70);  set(i_dist, 0.65); set(i_vig, 100); );
		  );

		copy(layer[vr_setup_hmd2].html, i_headset);
		if(%1 != 0,
			copy(webvr.mobilevr_lens_fov, i_fov);
			copy(webvr.mobilevr_lens_dist, i_dist);
			copy(webvr.mobilevr_lens_vign, i_vig);
			copy(layer[vr_setup_fov2].html, i_fov);
			copy(layer[vr_setup_dst2].html, i_dist);
			copy(layer[vr_setup_vig2].html, i_vig);
		  );
	</action>

</krpano>
